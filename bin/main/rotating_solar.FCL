/*
	This program demonstrate a solar tracking system with 2 DOF. This system
	gets the sensor data from 4 LDR sensors and control the motors to move the solar
	panel to the sun's direction

	Sensor inputs (0 to 5v) coming from the same direction sensors (north-south and east-west) substitute each other to get
	the values between (-5v to 5v).  

	Outputs are motor power outputs in Watts. 

	This is an assignment of M.Sc in AI University of Moratuwa
	
	Isuru Kalhara
	isurukalharag@gmail.com
*/

FUNCTION_BLOCK solar_tracker

VAR_INPUT				
	north_south_difference : REAL;
	east_west_difference : REAL;
END_VAR

VAR_OUTPUT				
	motor_we : REAL;
	motor_ns : REAL;
END_VAR

FUZZIFY north_south_difference 			
	TERM neg_low := gauss -2.5 0.5;
	TERM neg_high:= sigm -6.5 -3.5 ; 
	TERM zero := gauss 0 1.5;
	TERM pos_low := gauss 2.5 0.5;
	TERM pos_high:=  sigm 6.5 3.5 ; 
END_FUZZIFY

FUZZIFY east_west_difference 			 
	TERM neg_low := (-3, 0) (-2, 1) (-0.5, 0);
	TERM neg_high:= (-5, 1) (-3.5, 1) (-2.5, 0) ; 
	TERM zero := (-1.5,0) (0,1) (1.5,0);
	TERM pos_low := (0.5, 0) (2, 1) (3, 0); 
	TERM pos_high:=  (2.5, 0) (3.5, 1) (5, 1) ; 

END_FUZZIFY

DEFUZZIFY motor_ns 			
	TERM to_north_fast := sigm 10 6;
	TERM to_north_slow := gbell 2 2 4;
	TERM stop := gauss 0 0.5;
	TERM to_south_fast := sigm -10 -6;
	TERM to_south_slow := gbell 2 2 -4;

	METHOD : COG;			
	DEFAULT := 0;			
END_DEFUZZIFY

DEFUZZIFY motor_we 			
	
	TERM to_west_fast := (-25, 1) (-5, 0);
	TERM to_west_slow := (-20, 0) (-5, 1) ( 0,0);
	TERM stop := (-5, 0) ( 0, 1) ( 5,0);
	TERM to_east_slow := (0, 0) (5, 1) ( 20,0);
	TERM to_east_fast := (5, 0) (25, 1);

	METHOD : COG;		
	DEFAULT := 0;		
END_DEFUZZIFY


RULEBLOCK No1
	AND : MIN;
	OR   :MAX;			
	ACT : MIN;			
	ACCU : MAX;			

	RULE 1 : IF north_south_difference IS neg_low THEN motor_ns IS to_south_slow;
	RULE 2 : IF north_south_difference IS neg_high THEN motor_ns IS to_south_fast;
	RULE 3 : IF north_south_difference IS zero THEN motor_ns IS stop;
	RULE 4 : IF north_south_difference IS pos_low THEN motor_ns IS to_north_slow;
	RULE 5 : IF north_south_difference IS pos_high THEN motor_ns IS to_north_fast;

END_RULEBLOCK

RULEBLOCK No2
	AND : MIN;
	OR   :MAX;			
	ACT : MIN;			
	ACCU : MAX;			

	RULE 6 : IF east_west_difference IS neg_low THEN motor_we IS to_west_slow;
	RULE 7 : IF east_west_difference IS neg_high THEN motor_we IS to_west_fast;
	RULE 8 : IF east_west_difference IS zero THEN motor_we IS stop;
	RULE 9 : IF east_west_difference IS pos_low THEN motor_we IS to_east_slow;
	RULE 10 : IF east_west_difference IS pos_high THEN motor_we IS to_east_fast;

END_RULEBLOCK

END_FUNCTION_BLOCK
